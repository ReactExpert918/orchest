map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

server {
  listen 80;
  listen [::]:80;

  listen 443 ssl;
  listen [::]:443 ssl;

  ssl_certificate     /etc/ssl/certs/server.crt;
  ssl_certificate_key /etc/ssl/certs/server.key;

  # don't limit max_body_size
  client_max_body_size 0;

  resolver 127.0.0.11 valid=30s;

  server_name localhost;

  error_log  /var/log/nginx.jupyter.error.log debug;
  
  location /login {

    set $auth_server "auth-server";
    proxy_pass http://$auth_server;
    
  }

  error_page 401 = @error401;

  # If the user is not logged in, redirect them to login URL
  location @error401 {
    return 302 $scheme://$http_host/login;
  }

  location = /auth {

      set $auth_server "auth-server";

      internal;
      proxy_pass              http://$auth_server;
      proxy_pass_request_body off;
      proxy_set_header        Content-Length "";
      proxy_set_header        X-Original-URI $request_uri;
  }

  location / {

    auth_request /auth;

    set $orchest_host "orchest-webserver";
    proxy_pass http://$orchest_host;

    # WebSocket support
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_read_timeout 86400;
    
  }

  # Update server
  location /update-server {

    auth_request /auth;

    proxy_request_buffering off;
    proxy_read_timeout 1d;

    set $update_server "update-server";
    proxy_pass http://$update_server;
    
  }

  # File manager
  location /file-manager {

    auth_request /auth;

    proxy_request_buffering off;

    set $update_server "file-manager";
    proxy_pass http://$update_server;
    
  }

  location /api-proxy/ {

    auth_request /auth;

    set $orchest_host "orchest-api";
    
    set $suffix '';
    access_by_lua_block {
        ngx.var.suffix = string.gsub(ngx.var.uri, "/api%-proxy/", "")
    }

    proxy_pass http://$orchest_host/$suffix$is_args$args;
  }

  location ~* ^/jupyter_[\d_:]*/ {

    auth_request /auth;
    
    set $dynamic_ip '';

    access_by_lua_block {

        function split(pString, pPattern)
            local Table = {}  -- NOTE: use {n = 0} in Lua-5.0
            local fpat = "(.-)" .. pPattern
            local last_end = 1
            local s, e, cap = pString:find(fpat, 1)
            while s do
                if s ~= 1 or cap ~= "" then
                table.insert(Table,cap)
                end
                last_end = e+1
                s, e, cap = pString:find(fpat, last_end)
            end
            if last_end <= #pString then
                cap = pString:sub(last_end)
                table.insert(Table, cap)
            end
            return Table
        end

        splitted_uri = split(ngx.var.uri, "/")


        ngx.var.dynamic_ip = string.gsub(splitted_uri[1], "jupyter_", "")
        ngx.var.dynamic_ip = string.gsub(ngx.var.dynamic_ip, "_", ".")

    }

    proxy_pass http://$dynamic_ip:8888$request_uri;

    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header Host $dynamic_ip:8888;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-NginX-Proxy true;

    proxy_pass_header Set-Cookie;
    proxy_cookie_domain $host $dynamic_ip;

    # WebSocket support
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_read_timeout 86400;

  }
}