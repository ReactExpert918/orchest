How Orchest works
=================

Orchest runs as a collection of Docker containers and stores a global configuration file. The
location for this config is :code:`~/.config/orchest/config.json`.

Orchest is powered by your filesystem. Upon launching, Orchest will mount the
:code:`orchest/userdir/` directory, where :code:`orchest/` is the install directory from GitHub,
into the docker containers. Inside the :code:`userdir/` Orchest will store all your scripts that make
up the pipeline, for example :code:`.ipynb` and :code:`.py` files. Additionally the following files
will be stored inside the :code:`.orchest/` directory at the pipeline level (and thus *for each
pipeline*):

* The :ref:`Orchest SDK` stores step outputs in the :code:`.orchest/data/` directory to pass data
  between pipeline steps (in the case where :meth:`orchest.transfer.output_to_disk` is used).
* Logs are stored in :code:`.orchest/logs/` to show STDOUT output from scripts in the pipeline view.
* An autogenerated :code:`.orchest/pipeline.json` file that defines the properties of the pipeline and its
  steps.  This includes: execution order, names, images, etc. Orchest needs this pipeline definition
  file to work.

Giving a directory structure similar to the following:

.. code-block:: bash

    .
    ├── preprocessing.ipynb
    ├── .ipynb_checkpoints/
    ├── .orchest
    │   ├── data/
    │   ├── logs/
    │   └── pipeline.json
    └── model-training.ipynb


Installing additional packages
------------------------------

Orchest runs all your pipeline step code scripts (.ipynb, .py, .R, .sh) in containers. The default
images are based on the |jupyter_stack_link| and come with a number of
|pre_installed_link|.

We plan on supporting custom images and/or container commits, to avoid having to reinstall packages each
time a pipeline step is run.

.. |jupyter_stack_link| raw:: html

  <a href="https://jupyter-docker-stacks.readthedocs.io/en/latest/"
  target="_blank">Jupyter Docker Stacks</a>

.. |pre_installed_link| raw:: html

   <a
   href="https://jupyter-docker-stacks.readthedocs.io/en/latest/using/selecting.html"
   target="_nlank">pre-installed packages</a>

Installing additional Python packages
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Execute commands inside the scripts to install the package before use.

For Jupyter notebooks you can run the following code in a cell:

.. code-block:: bash

   !conda install <package name>

or for the :code:`pip` packages run:

.. code-block:: bash

   !pip install <package name>


Or directly from within Python (i.e. for Python scripts):

.. code-block:: python

   from pip._internal import main as pip

   pip(['install', '--user', '<package name>'])


Installing additional R packages
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

R packages can be installed with the regular command:

.. code-block:: r
   
   install.packages("<package name>")
