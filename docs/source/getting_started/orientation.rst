Orientation
===========

.. TODO(yannick)
   Pretty much this entire section

Orchest concepts
----------------

.. * Build on top of filesystem and what that means for interactive runs and experiments (this will
..   copy the filesystem, read more in ... link)
.. * Environments
.. * Pipelines

Coming soon!

How Orchest works
-----------------

Orchest is a fully containerized application and its runtime can be managed through the ``orchest``
shell script. In the script you can see that the Docker socket ``/var/run/docker.sock`` is mounted,
which Orchest requires in order order to dynamically spawn Docker containers when running pipelines.
Global configurations are stored at ``~/.config/orchest/config.json``, for possible configuration
values see :ref:`configuration <configuration>`.

.. build on top of your filesystem (giving you the flexibility to edit the files in whatever way you
   like, through terminal, your editor or through our UI with deep Jupyter integration). You do need
   to follow a certain directory structure.
   projects and pipelines and environments(link to section)

Orchest is powered by your filesystem. Upon launching, Orchest will mount the content of the
``orchest/userdir/`` directory, where ``orchest/`` is the install directory from GitHub, at
different locations inside the docker containers. In the ``userdir/`` on the host machine Orchest
will store its state and user scripts. Your scripts that make up the pipeline, for example
``.ipynb`` and ``.py`` files, are stored inside the ``userdir/pipelines/`` directory and are mounted
in the container at ``/project-dir``. Additionally the following files will be stored inside the
``.orchest/`` directory at the pipeline level (and thus *for each pipeline*):

* The :ref:`Orchest SDK` stores step outputs in the ``.orchest/data/`` directory to pass data
  between pipeline steps (in the case where :meth:`orchest.transfer.output_to_disk` is used).
* Logs are stored in ``.orchest/logs/`` to show STDOUT output from scripts in the pipeline view.
* An autogenerated ``.orchest/pipeline.json`` file that defines the properties of the pipeline and its
  steps.  This includes: execution order, names, images, etc. Orchest needs this pipeline definition
  file to work.

Giving a directory structure similar to the following:

.. code-block:: bash

    myproject
        ├── .orchest
        │   ├── data/
        │   ├── logs/
        │   └── environments/
        ├── pipeline.orchest
        ├── prep.ipynb
        └── training.py

